How to create a 3 tier web app?
How to authorize the users?
How to leverage cloudfront?
Where to implement multi-AZ and multi-region architecture?

What is unhealthy state? - How to set the alarm? - CloudWatch

CPU and RAM - unhealthy state



DB - File name, First name, Last names, upload time, updated time, description

File name, First name, Last names, upload time, updated time, description, download link



Login
Home page
File upload 
user id  - user tables - 

CRUD - Lambda function 


Java code package - getuserdetails(Lambda) --> API gateway

Aurora -user profile - user content


user proile - insert users
 


Content table - user id, file name, 

user id - file already exists - update - otherwise  

UPSERT 




Download the file  with Cloudfront url


DNS server  - Load balance - Auto Scaling group - Aurora (2 replication) - DR


******************************************************************************************

Route 53 - Register a name - rajalakshmi.com -  server host - Load balancer ( multiple EC2 instances)
 
1 region - 3 AZ (a,b,c) - 

*************************************************

Aurora - RDS replicate - 

***************************************************

Contents to be in S3 bucket - configure in CloudFront - distributed across the world - users from different regions
geographically distributed 


***************************************************

Lambda - java shd be in package (wat u need to configure) - python dont need package
	- connects DB everytime calls



API gateway - 


*****************************************************

Cloud Watch - EC2, RDS

*****************************************************

SNS - Simple Notification Service - can send an email, msg to q, call API


*****************************************************

IAM - identity and access management - User creation (admin group , users group) - Roles - Policies (1 can write S3, Lambda function, EC2 instances)
Users can be attached to the policies



Verbs in REST service

Get -
Post - create the  
Put - exists updates, otherwise creates
Delete - 
Options - 

List file contents - get

Put to create and update - Idempotent

Delete to 
***********************************************************

SNS
Created Topic - Create subscription


Cloud Watch - create rules - call lambda fn - errormessagehandler - call message to 

post a message 


************************************************************


how to aceess key id and secret key id



*************************************************************
Instance role and service role
